 - SQL (Structured Query Language — язык структурированных запро-
сов) является языком реляционных баз данных.


Любые данные, используемые в моделировании, имеют свои типы
данных. Какие типы данных поддерживает реляционная модель?
В первом приближении принято различать типы данных простые
и структурированные [4].
Простые, или атомарные, типы данных не обладают внутренней
структурой. Данные такого типа называют скалярными. К простым
типам данных относятся, например, следующие типы:
· логический;
· строковый;
· численный.
Этот список можно расширить и уточнить, добавляя другие типы:
· целый;
· вещественный;
· дата;
· время;
· денежный;
· перечислимый;
· интервальный и т. д.



Соотношение реляционной и табличной терминологии:
Реляционная модель данных       Табличное представление
 Отношение                        Реляционная таблица
 Атрибут                          Имя столбца
 Кортеж                           Строка
 Домен                            Множество допустимых значений для столбца
 Степень отношения                Число столбцов реляционной таблицы
 Мощность отношения               Число строк реляционной таблицы
 Реляционная база данных          Совокупность взаимосвязанных таблиц


Две и более таблиц могут считаться эквивалентными при
выполнении следующих условий:
· таблицы имеют одинаковое количество столбцов;
· таблицы содержат столбцы с одинаковыми наименованиями;
· столбцы с одинаковыми наименованиями содержат данные из одних и тех же доменов;
· таблицы имеют одинаковые строки с учетом того, что порядок столбцов может различаться.


Основными свойствами потенциального ключа являются:
· уникальность — не может быть в отношении двух и более кор-
тежей с одинаковыми значениями ключа;
· неизбыточность — никакое подмножество ключа не может вы-
ступать в роли ключа;
· обязательность (определенность) — ни при каких условиях
атрибуты ключа не могут принимать неопределенные (Null)
значения.
Например, понятие «номер сотрудника» в роли потенциального
первичного ключа как ограничение означает, что не может быть двух
и более персон с одинаковыми учетными номерами.


- перечень сущьностей БД
- индексация часто используемых полей
 - ногрмализация БД (до 3-й)




 InnoDB — одна из выбираемых подсистем низкого уровня в СУБД MySQL, входит во все стандартные сборки для различных операционных систем. Основным отличием InnoDB от других подсистем низкого уровня MySQL является наличие механизма транзакций и внешних ключей.





Ниже приведена простая команда, запрашивающая у сервера информацию об его версии и текущей дате. Введите ее в командной строке mysql> и нажмите Enter:

mysql> SELECT VERSION(), CURRENT_DATE;

+--------------+--------------+
| VERSION()    | CURRENT_DATE |
+--------------+--------------+
| 3.22.20a-log | 1999-03-19   |
+--------------+--------------+
1 row in set (0.01 sec)
mysql>
Этот запрос иллюстрирует следующие особенности mysql:

Команда обычно состоит из SQL-выражения, за которым следует точка с запятой. (Из этого правила есть и исключения - команды без точки с запятой. Одним из них является упомянутая выше команда QUIT, остальные мы рассмотрим позднее.)
Когда пользователь вводит команду, mysql отправляет ее серверу для выполнения и выводит на экран сначала результаты, а затем - новую строку mysql>, что означает готовность к выполнению новых команд.
mysql выводит результаты работы запроса в виде таблицы (строк и столбцов). В первой строке этой таблицы содержатся заголовки столбцов, а в следующих строках - собственно результаты. Обычно заголовками столбцов становятся имена, полученные из таблиц базы. Если же извлекается не столбец таблицы, а значение выражения (как это происходит в приведенном выше примере), mysql дает столбцу имя запрашиваемого выражения.
mysql сообщает количество возвращаемых строк и время выполнения запроса, что позволяет в некоторой степени составить представление о производительности сервера. Эти значения обычно весьма впечатляют, так как представляют обычное (а не машинное время), кроме того, на них оказывает влияние загрузка сервера и скорость работы сети (для сокращения размеров листингов в остальных примерах этой главы строка "rows in set" удалена).



Для ввода ключевых слов можно использовать любой регистр символов. Приведенные ниже запросы абсолютно идентичны:

mysql> SELECT VERSION(), CURRENT_DATE;
mysql> select version(), current_date;
mysql> SeLeCt vErSiOn(), current_DATE;




А это - еще один запрос. В нем демонстрируется использование mysql в качестве несложного калькулятора:

mysql> SELECT SIN(PI()/4), (4+1)*5;
+-------------+---------+
| SIN(PI()/4) | (4+1)*5 |
+-------------+---------+
|    0.707107 |      25 |
+-------------+---------+



Все команды, представленные выше, были относительно короткими и состояли из одной строки. В одну строку можно поместить и несколько команд. Но каждая из них должна заканчиваться точкой с запятой:

mysql> SELECT VERSION(); SELECT NOW();
+--------------+
| VERSION()    |
+--------------+
| 3.22.20a-log |
+--------------+
+---------------------+
| NOW()               |
+---------------------+
| 1999-03-19 00:15:33 |
+---------------------+



Втискивать все команды в одну строку совсем не обязательно, так что создание длинных команд, занимающих несколько строк, никаких проблем не вызывает. Для mysql признаком завершения выражения является точка с запятой, а не конец строки (другими словами, mysql принимает команды без форматирования: строки с командами собираются, но не исполняются до тех пор, пока программа не обнаружит точку с запятой).

Вот пример несложного выражения, занимающего несколько строк:

mysql> SELECT
    -> USER()
    -> ,
    -> CURRENT_DATE;
+--------------------+--------------+
| USER()             | CURRENT_DATE |
+--------------------+--------------+
| joesmith@localhost | 1999-03-18   |
+--------------------+--------------+
Обратите внимание на то, как изменилась метка командной строки (с mysql> на ->) после ввода первой строки этого запроса. Таким образом программа mysql показывает, что завершенного выражения она пока что не получила и ожидает его полного ввода. Эта метка очень полезна, так как предоставляет весьма ценную информацию о состоянии программы. С ее помощью всегда можно узнать, чего ждет mysql.
Если вы решите отменить исполнение набираемой команды, наберите \c:

mysql> SELECT
    -> USER()
    -> \c
mysql>
Обратите внимание на метку: после ввода команды \c она снова принимает вид mysql>, показывая, что программа mysql перешла в режим ожидания указаний.



В этой таблице приведены все возможные варианта вида метки командной строки и соответствующие им состояния mysql:

Метка	          Значение
mysql>	   Ожидание новой команды.
->	       Ожидание следующей строки многострочной команды.
'>	       Ожидание следующей строки, сбор строкового выражения, начинающегося с одиночной                  кавычки (`'').
">	        Ожидание следующей строки, сбор строкового выражения, начинающегося с двойной                   кавычки (`"').