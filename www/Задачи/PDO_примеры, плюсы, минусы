
PDO, разнообразие, чем отличаются, преимущества и недостатки.



Преимущества PDO:
 - поддерживает много СУБД
 -- MySQL;
    SQLite;
    PostgreSQL;
    Microsoft SQL Server.






    Резюме
     	                           PDO	                 MySQLi
    Поддержка баз данных	12 различных драйверов	Только MySQL
          API	                    ООП	             ООП+процедурная часть
    Соединение	                    Просто	         Просто
    Именованные параметры	          Есть          	Нет
    Объектное отображение	          Есть	            Есть
    Подготовленные выражения          Есть	             Нет
    Производительность	             Хорошая	        Хорошая
    Хранимые процедуры	               Есть	              Есть


    СоединениеConnection
    Оба варианта предоставляют очень простые инструменты для соединения с базой данных:

    // PDO
       $pdo = new PDO("mysql:host=localhost;dbname=database", 'username', 'password');


    // MySQLi, процедурная часть
    $mysqli = mysqli_connect('localhost','username','password','database');


    // MySQLi, ООП
    $mysqli = new mysqli('localhost','username','password','database');


 =========================================

   DSN (Data Source Name) — название источника данных - сведения для подключения к базе, представленные в виде строки.
     В примере работаем с MySQL/MariaDB, поэтому указываем:
      - тип драйвера (тип БД);
      - имя хоста, где расположена СУБД;
      - порт (необязательно, если используется стандартный порт 3306);
       - имя базы данных;
        - кодировку (необязательно).


Пример правильного соединения:
    $host = '127.0.0.1';
    $db   = 'test';
    $user = 'root';
    $pass = '';
    $charset = 'utf8';

    $dns = "mysql:host=$host;dbname=$db;charset=$charset";

    $opt = [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES   => false,
    ];
    $pdo = new PDO($dns, $user, $pass, $opt);


      $pdo = new PDO();
        $pdo->dns = $dns;
        $pdo->user = $user;






PDO::ATTR_ERRMODE: Режим сообщений об ошибках.
 - PDO::ERRMODE_SILENT: Только установка кодов ошибок.
 - PDO::ERRMODE_WARNING: Вызывать E_WARNING.
 - PDO::ERRMODE_EXCEPTION: Выбрасывать исключения.

 PDO::ATTR_DEFAULT_FETCH_MODE: режим выборки данных по умолчанию.
 - PDO::FETCH_ASSOC: возвращает массив, индексированный именами столбцов
 - PDO::FETCH_BOTH (по умолчанию): возвращает массив, индексированный именами столбцов результирующего набора, а также их номерами (начиная с 0)
 - PDO::FETCH_BOUND: возвращает TRUE и присваивает значения столбцов результирующего набора переменным PHP, которые были привязаны к этим столбцам методом
- PDO::FETCH_CLASS: создает и возвращает объект запрошенного класса, присваивая значения столбцов результирующего набора именованным свойствам класса
- PDO::FETCH_NUM: возвращает массив, индексированный номерами столбцов (начиная с 0)
- PDO::FETCH_OBJ: создает анонимный объект со свойствами, соответствующими именам столбцов результирующего набора

Возвращаемые значения:
В случае успешного выполнения функции возвращаемое значение зависит от режима выборки. В случае неудачи, функция всегда возвращает FALSE.

PDO::ATTR_EMULATE_PREPARES
====================================

По моему, удобней:
1) PDO::FETCH_ASSOC - Результат сохраняется в ассоциативном массиве, в котором ключ — имя столбца, а значение — соответствующее значение строки:

$stmt = $pdo->query("SELECT * FROM planets");
$results = $stmt->fetch(PDO::FETCH_ASSOC);
В результате получим:

Array
(
    [id] => 1
    [name] => earth
    [color] => blue
)


2) PDO::FETCH_NUM
При использовании этого режима результат представляется в виде массива, индексированного номерами столбцов (начиная с 0):

Array
(
   [0] => 1
   [1] => earth
   [2] => blue


3) DO::FETCH_COLUMN
Этот вариант полезен, если нужно получить перечень значений одного поля в виде одномерного массива, нумерация которого начинается с 0. Например:

$stmt = $pdo->query("SELECT name FROM planets");
В результате получим:

Array
(
    [0] => earth
    [1] => mars
    [2] => jupiter
)




Пример #2 Обработка ошибок подключения

<?php
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
    foreach($dbh->query('SELECT * from FOO') as $row) {
        print_r($row);
    }
    $dbh = null;
} catch (PDOException $e) {
    print "Error!: " . $e->getMessage() . "<br/>";
    die();
}

?>




